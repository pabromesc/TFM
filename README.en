                                                        Zeek
                                                  Pablo Romero Escot
                                                   README - English
                                                      01-10-2021
------------------------------------------------------------------------------------------------------------------------------------------

DESCRIPTION

This is an application developed in Python language which is responsible for automatically analysing Zeek's 
capacity to detect web attacks based on HTTP URIs. To do this, Zeek will first be deployed and configured to
monitor incoming traffic on a given network, where an web server is deployed, which will be the 
destination of all HTTP requests launched by this tool. Once the tool has executed all the traffic, the logs 
generated by Zeek will be collected and processed by the application, so that they can be subsequently 
analysed and the URIs that have been detected as attacks will be extracted.

To do this, the tool consists of 5 applications. For each one it is indicated:

a) Description
b) I/O: Input -> Output
c) Syntax (call)

Subsequently, the formats of the different types of files used are described in greater detail.

#########
1) complete.py

a) Description: This is the main script of the tool. Its function is automatically to execute the complete process
   of the application, being in charge of executing the rest of the scripts when it is necessary to carry out 
   the function assigned to each one of them.

b) I/O: file-raw.uri -> As output, it generates the different files that each one of the scripts
   that it executes is in charge of carrying out

c) Syntax:
   complete.py  file-raw.uri  file.uri  dir_out_time  dir_out_log  dir_out_attacks  dir_out_clean

   * "file-raw.uri": path of the input file in "raw.uri" format.
   * "file.uri": path to the file to be generated with the list of URIs to be analyzed.
   * "dir_out_time": path to the directory where the file "file.time" will be generated.
   * "dir_out_log": path to the directory where the file with the logs generated by Zeek will be stored, after they have been processed.
   * "dir_out_attacks": path to the directory where the file with the list of URIs identified as attacks will be generated.
   * "dir_out_clean": path to the directory where the file with the list of URIs NOT identified as attacks will be generated.
   * "numerical_results_file": path to the file to be created or modified with the numerical results of the analysis.
#########

#########
2) generator.py

a) Description: It is in charge of processing the original dataset provided ("X-raw.uri"), where each line is 
   composed by a URI and the number of characters that this URI has, and to generate a new file where each 
   line consists of only one URI.

b) I/O: file-raw.uri -> file.uri

c) Syntax:
   generator.py   file-raw.uri   file-out.uri

   * "file-raw.uri": path to the input file in the format "raw.uri": {character_number} {URI}.
   * "file-out.uri": path to the output file in the format "file.uri": {URI}.
#########

#########
3) launcher.py

a) Description: It is in charge of reading the file provided as input, "file.uri", and executing the different URIs
   that compose this file against a web server, generating a file "file.time", as a record of the URIs executed and
   the time at which they were executed. 

b) I/O: file.uri -> file.time

c) Syntax:
   launcher.py   file.uri   dir_out_time

   * "file.uri": path to the file with the list of URIs to be analysed. Format: {URI}.
   * "dir_out_time": path to the directory where the "file.time" file will be generated. Format: {Timestamp}\t{URI}.
#########

#########
4) analyzer.py

a) Description: Its main objective is to obtain the logs generated by Zeek, extract from them the useful information and process it. 
   The results are stored in two files, one of them includes only the URIs detected as attacks, the time instant in which they occurred
   and the rule that detected them (file.log), and in the other file, this information is stored together with more details provided by
   Zeek regarding the attack, such as what type of alert has occurred or a small description of what happened (file_detailed.log).

b) I/O: http.log, notice.log, signatures.log -> file.log, file_detailed.log

c) Syntax:
   analyzer.py   dir_out_log   id_log_file

   * "dir_out_log": path to the directory where the file with the logs generated by Zeek will be stored,
   after they have been processed.
   * "id_log_file": identifier name to be assigned to the file generated with the logs once they have been processed.

   NOTE: LOG files are obtained from their standard location:
   * Folder: /usr/local/zeek/logs/current/
   * Name:  
      * http.log
      * notice.log
      * signatures.log
#########

#########
5) detector.py

a) Description: Get those URIs that have been detected as attacks by Zeek and those that have been categorised as 
   clean traffic. 

b) I/O: file-raw.uri, file.time, file.log -> file.attacks, file.attacks-extendido, file.clean, numerical-results-file.txt

c) Syntax:
   detector.py  file-raw.uri  file.time  file.log  dir_out_attacks  dir_out_clean  numerical-result-file.txt
        
   * "file-raw.uri": path to the input file in "raw.uri" format.
   * "file.time": file with the list of executed URIs and the time instant in which each of them were launched.
   * "file.log": file with the logs generated by Zeek, which have been previously processed.
   * "dir_out_attacks": path to the directory where the file with the list of URIs identified as attacks will be generated. 
   * "dir_out_clean": path to the directory where the file with the list of URIs NOT identified as attacks will be generated.
   * "numerical-results-file.txt": path to the file to be created or modified with the numerical results of the analysis. 
#########


############################
FORMAT OF FILES USED

1) "file-raw.uri": file with the URIs to be analysed and the number of characters in each one. Format:

   {Characters_number} {URI}

2) "file.uri": file with only the URIs to be analyzed. Format:

   {URI}

3) "file.time": file with the URIs sent to the web server and the TimeStamp in which they have been sent. Format:

   {TimeStamp}\t{URI}

4) "file.log": file with the results of obtaining the logs generated by Zeek and carrying out the processing of this 
   information, keeping only the fields referring to the TimeStamp in which the alert occurred, the URI and the 
   identifier of the rule that detected it. Format:

   {TimeStamp}\t{URI}\t{ID_regla}

5) "file_detailed.log": file with the results of obtaining the logs generated by Zeek and performing the processing of this 
   information, including more details of the detection, in a more readable format. If no any URI has been detected as an attack,
   this file is not created. Format:

   URI: {URI}
   Type: {type of alert}
   Message: {little description of what happened}
   Signature identifier: {identifier of the rule that has triggered the alert}
   Timestamp: {instant of time at which it occurred}

6) "file.attacks": set of URIs catalogued as malicious traffic. Format:

   {URI}

7) "file.attacks-extendido": file with the list of URIs detected as attacks, together with the number of the line where the URI 
   is located in the dataset provided, the number of rules that have been triggered due to its execution and the identifier of 
   each of these rules. Format: 

   Packet [{}]\tUri [{}]\t Nattacks [{}]\t[{ID_rule_1}]\t[{ID_rule_2}]....

8) "file.clean": set of URIs categorised as clean traffic. Format:

   {URI}

9) "numerical-results-file.txt": numerical results obtained from the analysis. It records the number of executed URIs, number of those
   that have been considered as attacks and number of URIs that have been catalogued as clean traffic. Format:

   {Name of the analysed file}:
   Numero de URIs procesadas: {}
   Numero de URIs detectadas como ataque: {}
   Numero de URIs NO detectadas como ataque: {}